{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "carbon",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#string-escapes"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#reserved-words"
    },
    {
      "include": "#operator-dedicated-keywords-statements"
    },
    {
      "include": "#ctrl-statements"
    },
    {
      "name": "string.quoted.triple.carbon",
      "begin": "'''([^\\s'#]*\\n)?",
      "end": "'''",
      "beginCaptures": {
        "1": {
          "name": "constant.character.escape.carbon"
        }
      },
      "patterns": [
        {
          "include": "#string_escapes"
        }
      ]
    },
    {
      "include": "#true-false"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#customs"
    }
  ],
  "repository": {
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.new.carbon",
          "match": "\\b(\\+|-|\\*|/|!)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.carbon",
          "begin": "//",
          "end": "\n"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.carbon",
          "begin": "'",
          "end": "'"
        },
        {
          "name": "string.quoted.double.carbon",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.triple.carbon",
          "begin": "'''",
          "end": "'''"
        }
      ]
    },
    "string_escapes": {
      "name": "constant.character.escape.carbon",
      "match": "\\\\([tnr'\"0\\0]|x[0-9A-F]{2}|u\\{[0-9A-F]{4,}\\})"
    },
    "special-keywords": {
      "patterns": [
        {
          "name": "keyword.control.less.carbon",
          "match": "\\b(break|case|continue|default|else|if|for|match|return|returned|then|while)\\b"
        }
      ]
    },
    "operator-dedicated-keywords-statements": {
      "patterns": [
        {
          "name": "keyword.carbon",
          "match": "\\b(abstract|adapt|addr|alias|and|api|as|auto|base|choice|class|constraint|destructor|extend|final|fn|forall|friend|impl|impls|import|in|interface|let|library|like|namespace|not|observe|or|override|package|partial|private|protected|require|Self|template|type|var|virtual|where|_)\\b"
        }
      ]
    },
    "reserved-words": {
      "patterns": [
        {
          "name": "support.type.carbon",
          "match": "\\b(As|bool|Carbon\\.Int|Carbon\\.UInt|f16|f32|f64|f128|i8|i16|i32|i64|i128|i256|Slice|String|StringView|type|u8|u16|u32|u64|u128|u256)\\b"
        }
      ]
    },
    "true-false": {
      "patterns": [
        {
          "name": "keyword.operator.new.carbon",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.carbon",
          "match": "\\b[a-zA-Z]+\\s*\\("
        }
      ]
    },
    "customs": {
      "patterns": [
        {
          "name": "support.class.carbon",
          "match": "(?<=\\bpackage\\s)\\w+"
        },
        {
          "name": "support.variable.carbon",
          "match": "(?<=\\s*\\.)\\w+"
        },
        {
          "name": "support.variable.carbon",
          "match": "(?<=\\bas\\s)\\w+"
        },
        {
          "name": "support.variable.carbon",
          "match": "\\w+(?=\\s*:)"
        },
        {
          "name": "support.variable.carbon",
          "match": "(?<=\\blet\\s)\\w+"
        },
        {
          "name": "support.variable.carbon",
          "match": "(?<=\\bvar\\s)\\w+"
        },
        {
          "name": "support.function.carbon",
          "match": "(?<=\\bfn\\s)\\w+"
        },
        {
          "name": "support.other.carbon",
          "match": "(?<=\\bimpl\\s)\\w+"
        },
        {
          "name": "support.type.property-name.carbon",
          "match": "(?<=\\bimport\\s)\\w+"
        },
        {
          "name": "support.class.carbon",
          "match": "(?<=\\bclass\\s)\\w+"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.carbon",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.carbon",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.carbon",
          "match": "\\b\\d{1,3}(?:_\\d{3})*\\b"
        }
      ]
    }
  },
  "scopeName": "source.carbon"
}